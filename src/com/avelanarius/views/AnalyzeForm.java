package com.avelanarius.views;

import com.amazonaws.event.ProgressEvent;
import com.amazonaws.event.ProgressListener;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.Region;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.amazonaws.services.s3.transfer.Download;
import com.amazonaws.services.s3.transfer.TransferManager;
import com.amazonaws.services.s3.transfer.TransferManagerConfiguration;
import com.amazonaws.util.IOUtils;
import com.avelanarius.models.ExecutableGenerator;
import com.avelanarius.models.GenerationInfo;
import com.avelanarius.models.TaskSuiteReport;
import com.avelanarius.models.TextFileInput;
import com.avelanarius.models.TextFileOutput;
import java.awt.BorderLayout;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author avela
 */
public class AnalyzeForm extends javax.swing.JFrame {

    /**
     * Creates new form AnalyzeForm
     */
    public AnalyzeForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1Zmienna = new javax.swing.ButtonGroup();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFiles = new javax.swing.JList<>();
        jButtonDodaj = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jButtonAWS = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jPanelChart = new javax.swing.JPanel();
        jButtonDodajWiele = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableStats = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableWersje = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButtonChart = new javax.swing.JButton();
        jComboWykres1Wlasciwosc = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboWykres1Plik = new javax.swing.JComboBox<>();
        jRadioZwyklyMaksimum = new javax.swing.JRadioButton();
        jRadioKumulatywny = new javax.swing.JRadioButton();
        jRadioHistogram = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jFieldWykres1Srednia = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jFieldWykres1Odchylenie = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jFieldStat1_1 = new javax.swing.JTextField();
        jFieldStat1_2 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jFieldStat2_1 = new javax.swing.JTextField();
        jFieldStat2_2 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jFieldStat3_1 = new javax.swing.JTextField();
        jFieldStat3_2 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jFieldStat4_1 = new javax.swing.JTextField();
        jFieldStat4_2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jFieldStat5_1 = new javax.swing.JTextField();
        jFieldStat5_2 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jFieldStat6_1 = new javax.swing.JTextField();
        jFieldStat6_2 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboWykres2Wlasciwosc1 = new javax.swing.JComboBox<>();
        jComboWykres2Wlasciwosc2 = new javax.swing.JComboBox<>();
        jButtonChart2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboWykres2Plik = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jButtonJoin = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jFieldJoinSciezka = new javax.swing.JTextField();
        jButtonJoinSciezkaDocelowa = new javax.swing.JButton();
        jProgressJoin = new javax.swing.JProgressBar();
        jLabel13 = new javax.swing.JLabel();
        jFieldJoinExeJoin = new javax.swing.JTextField();
        jButtonJoinExeJoin = new javax.swing.JButton();
        jCheckUruchomJoin = new javax.swing.JCheckBox();
        jProgressAWS = new javax.swing.JProgressBar();

        jLabel24.setText("jLabel24");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analiza");

        jScrollPane1.setViewportView(jListFiles);

        jButtonDodaj.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonDodaj.setText("Dodaj plik");
        jButtonDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajActionPerformed(evt);
            }
        });

        jButtonRefresh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jButtonAWS.setText("Wczytaj z AWS");
        jButtonAWS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAWSActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jPanelChart.setBackground(new java.awt.Color(102, 102, 102));
        jPanelChart.setMinimumSize(new java.awt.Dimension(100, 100));
        jPanelChart.setLayout(new java.awt.BorderLayout());

        jButtonDodajWiele.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonDodajWiele.setText("Dodaj wiele");
        jButtonDodajWiele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajWieleActionPerformed(evt);
            }
        });

        jTableStats.setAutoCreateRowSorter(true);
        jTableStats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTableStats);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Dane", jPanel1);

        jTableWersje.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Wersja", "Aktywne"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableWersje);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Wersje", jPanel6);

        jButtonChart.setText("Generuj wykres");
        jButtonChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChartActionPerformed(evt);
            }
        });

        jComboWykres1Wlasciwosc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboWykres1WlasciwoscItemStateChanged(evt);
            }
        });

        jLabel1.setText("Właściwość: ");

        jLabel2.setText("Plik: ");

        jComboWykres1Plik.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboWykres1PlikItemStateChanged(evt);
            }
        });

        buttonGroup1Zmienna.add(jRadioZwyklyMaksimum);
        jRadioZwyklyMaksimum.setSelected(true);
        jRadioZwyklyMaksimum.setText("Zwykły i maksimum");
        jRadioZwyklyMaksimum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioZwyklyMaksimumActionPerformed(evt);
            }
        });

        buttonGroup1Zmienna.add(jRadioKumulatywny);
        jRadioKumulatywny.setText("Kumulatywny");
        jRadioKumulatywny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioKumulatywnyActionPerformed(evt);
            }
        });

        buttonGroup1Zmienna.add(jRadioHistogram);
        jRadioHistogram.setText("Histogram");
        jRadioHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioHistogramActionPerformed(evt);
            }
        });

        jLabel6.setText("Średnia: ");

        jFieldWykres1Srednia.setEditable(false);

        jLabel7.setText("Odchylenie standardowe:");

        jFieldWykres1Odchylenie.setEditable(false);

        jPanel5.setLayout(new java.awt.GridLayout(7, 3));
        jPanel5.add(jLabel8);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("mniejsze niż");
        jPanel5.add(jLabel9);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("większe niż");
        jPanel5.add(jLabel10);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("15,86% (1/6)");
        jPanel5.add(jLabel11);

        jFieldStat1_1.setEditable(false);
        jPanel5.add(jFieldStat1_1);

        jFieldStat1_2.setEditable(false);
        jPanel5.add(jFieldStat1_2);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("2,27% (1/44)");
        jPanel5.add(jLabel14);

        jFieldStat2_1.setEditable(false);
        jPanel5.add(jFieldStat2_1);

        jFieldStat2_2.setEditable(false);
        jPanel5.add(jFieldStat2_2);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("0,1349% (1/740)");
        jPanel5.add(jLabel17);

        jFieldStat3_1.setEditable(false);
        jPanel5.add(jFieldStat3_1);

        jFieldStat3_2.setEditable(false);
        jPanel5.add(jFieldStat3_2);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel20.setText("0,0031% (1/31 560)");
        jPanel5.add(jLabel20);

        jFieldStat4_1.setEditable(false);
        jPanel5.add(jFieldStat4_1);

        jFieldStat4_2.setEditable(false);
        jPanel5.add(jFieldStat4_2);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("0,000029% (1/3 400 000)");
        jPanel5.add(jLabel23);

        jFieldStat5_1.setEditable(false);
        jPanel5.add(jFieldStat5_1);

        jFieldStat5_2.setEditable(false);
        jPanel5.add(jFieldStat5_2);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel27.setText("0,0000001% (1/1 000 000 000)");
        jPanel5.add(jLabel27);

        jFieldStat6_1.setEditable(false);
        jPanel5.add(jFieldStat6_1);

        jFieldStat6_2.setEditable(false);
        jPanel5.add(jFieldStat6_2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonChart))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboWykres1Wlasciwosc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboWykres1Plik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jRadioZwyklyMaksimum)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioKumulatywny)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioHistogram)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jFieldWykres1Srednia))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFieldWykres1Odchylenie)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboWykres1Wlasciwosc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboWykres1Plik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioZwyklyMaksimum)
                    .addComponent(jRadioKumulatywny)
                    .addComponent(jRadioHistogram))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFieldWykres1Srednia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFieldWykres1Odchylenie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonChart)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Analiza jednej zmiennej", jPanel2);

        jLabel3.setText("Właściwość 1: ");

        jLabel4.setText("Właściwość 2: ");

        jComboWykres2Wlasciwosc1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboWykres2Wlasciwosc1ItemStateChanged(evt);
            }
        });

        jComboWykres2Wlasciwosc2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboWykres2Wlasciwosc2ItemStateChanged(evt);
            }
        });

        jButtonChart2.setText("Generuj wykres");
        jButtonChart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChart2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Plik:");

        jComboWykres2Plik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboWykres2PlikActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboWykres2Wlasciwosc1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 548, Short.MAX_VALUE)
                        .addComponent(jButtonChart2))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboWykres2Wlasciwosc2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboWykres2Plik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboWykres2Wlasciwosc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboWykres2Wlasciwosc2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboWykres2Plik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                .addComponent(jButtonChart2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Wykres dwóch zmiennych", jPanel4);

        jButtonJoin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonJoin.setText("Generuj złączenie plików");
        jButtonJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonJoinActionPerformed(evt);
            }
        });

        jLabel12.setText("Ścieżka docelowa:");

        jButtonJoinSciezkaDocelowa.setText("...");
        jButtonJoinSciezkaDocelowa.setToolTipText("");
        jButtonJoinSciezkaDocelowa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonJoinSciezkaDocelowaActionPerformed(evt);
            }
        });

        jProgressJoin.setStringPainted(true);

        jLabel13.setText("Program join:");

        jFieldJoinExeJoin.setEnabled(false);

        jButtonJoinExeJoin.setText("...");
        jButtonJoinExeJoin.setEnabled(false);
        jButtonJoinExeJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonJoinExeJoinActionPerformed(evt);
            }
        });

        jCheckUruchomJoin.setText("Wykonaj złączenie programem");
        jCheckUruchomJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckUruchomJoinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jProgressJoin, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonJoin))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(27, 27, 27)
                                .addComponent(jFieldJoinExeJoin))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFieldJoinSciezka)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonJoinSciezkaDocelowa)
                            .addComponent(jButtonJoinExeJoin, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckUruchomJoin)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jFieldJoinSciezka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonJoinSciezkaDocelowa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckUruchomJoin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonJoinExeJoin)
                    .addComponent(jLabel13)
                    .addComponent(jFieldJoinExeJoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonJoin)
                    .addComponent(jProgressJoin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Złączenie plików", jPanel3);

        jProgressAWS.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButtonDodaj, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                                .addComponent(jProgressAWS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButtonDodajWiele, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                .addComponent(jButtonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonAWS, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                .addComponent(jButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelChart, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAWS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDodajWiele, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jButtonDodaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgressAWS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajActionPerformed
        if (this.jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.files.add(this.jFileChooser.getSelectedFile().getAbsolutePath());
            String[] filesData = new String[this.files.size()];
            this.files.toArray(filesData);
            this.jListFiles.setListData(filesData);
        }
    }//GEN-LAST:event_jButtonDodajActionPerformed

    private void jButtonJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonJoinActionPerformed
        Runnable joinTask = () -> {
            int czesci = (this.jCheckUruchomJoin.isSelected() ? 4 : 3);
            ArrayList<GenerationInfo> generationInfos = new ArrayList<GenerationInfo>();
            ArrayList<TaskSuiteReport> taskSuiteReports = new ArrayList<TaskSuiteReport>();
            HashMap<String, byte[]> outputContents = new HashMap<String, byte[]>();
            this.jProgressJoin.setMaximum(this.files.size());
            this.jProgressJoin.setValue(0);
            this.jProgressJoin.setString("1 / " + czesci);
            ArrayList<Long> versions = this.getSelectedVersions();
            for (String filename : this.files) {
                try {
                    ZipFile zipFile = new ZipFile(filename);
                    Enumeration<? extends ZipEntry> entries = zipFile.entries();

                    while (entries.hasMoreElements()) {
                        ZipEntry zipEntry = entries.nextElement();
                        if (zipEntry.getName().endsWith(".srep")) {
                            ObjectInputStream objectInputStream = new ObjectInputStream(zipFile.getInputStream(zipEntry));
                            TaskSuiteReport taskSuiteReport = (TaskSuiteReport) objectInputStream.readObject();
                            if (versions.contains((long) taskSuiteReport.getTaskSuite().getVersion())) {
                                generationInfos.addAll(taskSuiteReport.getGenerationInfos());
                                taskSuiteReports.add(taskSuiteReport);
                            }
                            objectInputStream.close();
                        } else {
                            outputContents.put(zipEntry.getName(), IOUtils.toByteArray(zipFile.getInputStream(zipEntry)));
                        }
                    }
                    zipFile.close();
                } catch (java.io.IOException e1) {
                    Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, "Cannot read file: " + filename, e1);
                } catch (ClassNotFoundException e1) {
                    Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, "Cannot read file: " + filename, e1);
                }
                this.jProgressJoin.setValue(this.jProgressJoin.getValue() + 1);
            }
            ArrayList<String> inputTests = generationInfos.stream().map(q -> q.getInputFile().getName()).distinct().collect(Collectors.toCollection(ArrayList<String>::new));
            ArrayList<byte[]>[] joins = new ArrayList[inputTests.size()];
            for (int i = 0; i < inputTests.size(); i++) {
                joins[i] = new ArrayList<byte[]>();
            }
            this.jProgressJoin.setMaximum(generationInfos.size());
            this.jProgressJoin.setValue(0);
            this.jProgressJoin.setString("2 / " + czesci);
            for (TaskSuiteReport taskSuiteReport : taskSuiteReports) {
                for (GenerationInfo generationInfo : taskSuiteReport.getGenerationInfos()) {
                    joins[inputTests.indexOf(generationInfo.getInputFile().getName())].
                            add(outputContents.get(Paths.get(generationInfo.getOutputFile().getPath()).getFileName().toString()));
                    this.jProgressJoin.setValue(this.jProgressJoin.getValue() + 1);
                }
            }
            outputContents.clear();
            System.gc();
            this.jProgressJoin.setMaximum(inputTests.size());
            this.jProgressJoin.setValue(0);
            this.jProgressJoin.setString("3 / " + czesci);
            for (int i = 0; i < inputTests.size(); i++) {
                String inputTest = inputTests.get(i);
                ArrayList<byte[]> contents = joins[i];
                try {
                    PrintWriter printWriter = new PrintWriter(this.jFieldJoinSciezka.getText().toString() + File.separator + inputTest + ".join");
                    printWriter.println(contents.size());
                    for (byte[] content : contents) {
                        printWriter.println(new String(content));
                    }
                    printWriter.close();
                } catch (IOException e1) {
                    Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, "Cannot write file: " + inputTest, e1);
                }
                this.jProgressJoin.setValue(this.jProgressJoin.getValue() + 1);
            }
            for (int i = 0; i < inputTests.size(); i++) {
                joins[i].clear();
            }
            System.gc();
            if (this.jCheckUruchomJoin.isSelected()) {
                this.jProgressJoin.setMaximum(inputTests.size());
                this.jProgressJoin.setValue(0);
                this.jProgressJoin.setString("4 / " + czesci);
                for (int i = 0; i < inputTests.size(); i++) {
                    String inputTest = inputTests.get(i);
                    String sciezkaPlikuJoin = this.jFieldJoinSciezka.getText().toString() + File.separator + inputTest + ".join";
                    TextFileInput joinInput = new TextFileInput();
                    joinInput.setName(inputTest + ".join");
                    joinInput.setPath(sciezkaPlikuJoin);
                    TextFileOutput joinOutput = new TextFileOutput();
                    joinOutput.setName(inputTest + ".out");
                    joinOutput.setPath(this.jFieldJoinSciezka.getText().toString() + File.separator + inputTest + ".out");
                    ExecutableGenerator generator = new ExecutableGenerator();
                    generator.setExecutablePath(this.jFieldJoinExeJoin.getText());
                    generator.generateOutput(joinInput, joinOutput);
                    this.jProgressJoin.setValue(this.jProgressJoin.getValue() + 1);
                }
            }
            this.jProgressJoin.setString("Gotowe!");
        };
        Thread joinThread = new Thread(joinTask);
        joinThread.start();
    }//GEN-LAST:event_jButtonJoinActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        whileRefresh = true;
        ArrayList<GenerationInfo> generationInfos = new ArrayList<GenerationInfo>();
        ArrayList<TaskSuiteReport> taskSuiteReports = new ArrayList<TaskSuiteReport>();
        Set<Integer> versions = new TreeSet<Integer>();
        for (String filename : this.files) {
            try {
                ZipFile zipFile = new ZipFile(filename);
                Enumeration<? extends ZipEntry> entries = zipFile.entries();

                while (entries.hasMoreElements()) {
                    ZipEntry zipEntry = entries.nextElement();
                    if (zipEntry.getName().endsWith(".srep")) {
                        ObjectInputStream objectInputStream = new ObjectInputStream(zipFile.getInputStream(zipEntry));
                        TaskSuiteReport taskSuiteReport = (TaskSuiteReport) objectInputStream.readObject();
                        for (GenerationInfo generationInfo : taskSuiteReport.getGenerationInfos()) {
                            generationInfo.getOutputFile().getAdditionalInformation().put("Wersja", (long) taskSuiteReport.getTaskSuite().getVersion());
                            generationInfo.getOutputFile().getAdditionalInformation().put("Czas generowania (ms)", generationInfo.getGenerationLengthMs());
                            versions.add(taskSuiteReport.getTaskSuite().getVersion());
                        }
                        generationInfos.addAll(taskSuiteReport.getGenerationInfos());
                        taskSuiteReports.add(taskSuiteReport);
                        objectInputStream.close();
                    }
                }
                zipFile.close();
            } catch (java.io.IOException e1) {
                Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, "Cannot read file: " + filename, e1);
            } catch (ClassNotFoundException e1) {
                Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, "Cannot read file: " + filename, e1);
            }
        }
        DefaultTableModel dtm = (DefaultTableModel) jTableWersje.getModel();
        dtm.setNumRows(0);
        for (int version : versions) {
            dtm.addRow(new Object[]{String.valueOf(version), true});
        }
        Set<String> pliki = new TreeSet<>();
        Set<String> wlasciwosci = new TreeSet<>();
        for (GenerationInfo generationInfo : generationInfos.stream().sorted().collect(Collectors.toList())) {
            pliki.add(generationInfo.getInputFile().getName());
            wlasciwosci.addAll(generationInfo.getOutputFile().getAdditionalInformation().keySet());
        }
        this.setTableStats(generationInfos);
        this.loadedInfo = generationInfos.stream().sorted((q, k) -> q.getGenerateEndDate().compareTo(k.getGenerateEndDate())).collect(Collectors.toList());
        this.jComboWykres1Plik.removeAllItems();
        this.jComboWykres1Plik.addItem("");
        for (String plik : pliki) {
            this.jComboWykres1Plik.addItem(plik);
        }
        this.jComboWykres2Plik.removeAllItems();
        this.jComboWykres2Plik.addItem("");
        for (String plik : pliki) {
            this.jComboWykres2Plik.addItem(plik);
        }
        this.jComboWykres1Wlasciwosc.removeAllItems();
        for (String wlasciwosc : wlasciwosci) {
            this.jComboWykres1Wlasciwosc.addItem(wlasciwosc);
        }
        this.jComboWykres2Wlasciwosc1.removeAllItems();
        for (String wlasciwosc : wlasciwosci) {
            this.jComboWykres2Wlasciwosc1.addItem(wlasciwosc);
        }
        this.jComboWykres2Wlasciwosc2.removeAllItems();
        for (String wlasciwosc : wlasciwosci) {
            this.jComboWykres2Wlasciwosc2.addItem(wlasciwosc);
        }
        whileRefresh = false;
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChartActionPerformed
        if (this.jComboWykres1Plik.getSelectedIndex() == -1
                || this.jComboWykres1Wlasciwosc.getSelectedIndex() == -1) {
            return;
        }
        if (whileRefresh) {
            return;
        }
        String nazwa = this.jComboWykres1Wlasciwosc.getSelectedItem().toString();
        String plik = this.jComboWykres1Plik.getSelectedItem().toString();
        TimeSeries ts = new TimeSeries("Dane", Millisecond.class);
        TimeSeries tsMax = new TimeSeries("Dane Max", Millisecond.class);
        TimeSeries tsCumulative = new TimeSeries("Dane Sum", Millisecond.class);
        List<Double> listData = new ArrayList<>();
        long maxValue = 0;
        boolean znalMax = false;
        long sum = 0;
        long previous = -1;
        ArrayList<Long> versions = this.getSelectedVersions();
        for (GenerationInfo generationInfo : this.loadedInfo) {
            if (plik.isEmpty() || generationInfo.getInputFile().getName().equals(plik)) {
                if (generationInfo.getOutputFile().getAdditionalInformation().containsKey(nazwa)
                        && versions.contains(generationInfo.getOutputFile().getAdditionalInformation().get("Wersja"))) {
                    listData.add((double) generationInfo.getOutputFile().getAdditionalInformation().get(nazwa).longValue());
                    if (!znalMax) {
                        maxValue = generationInfo.getOutputFile().getAdditionalInformation().get(nazwa);
                        znalMax = true;
                    } else {
                        maxValue = Math.max(maxValue, generationInfo.getOutputFile().getAdditionalInformation().get(nazwa));
                    }
                    sum += generationInfo.getOutputFile().getAdditionalInformation().get(nazwa);
                    if (previous != generationInfo.getGenerateEndDate().getTime()) {
                        ts.add(new Millisecond(generationInfo.getGenerateEndDate()), generationInfo.getOutputFile().getAdditionalInformation().get(nazwa));
                        tsMax.add(new Millisecond(generationInfo.getGenerateEndDate()), maxValue);
                        tsCumulative.add(new Millisecond(generationInfo.getGenerateEndDate()), sum);
                    }
                    previous = generationInfo.getGenerateEndDate().getTime();
                }
            }
        }
        Collections.sort(listData);
        double srednia = listData.stream().reduce(0.0, Double::sum) / listData.size();
        double wariancja = listData.stream().map(q -> (q - srednia) * (q - srednia)).reduce(0.0, Double::sum) / listData.size();
        double odchylenie = Math.sqrt(wariancja);
        jFieldWykres1Srednia.setText(String.valueOf(srednia));
        jFieldWykres1Odchylenie.setText(String.valueOf(odchylenie));
        jFieldStat1_1.setText(String.valueOf(srednia - 1 * odchylenie));
        jFieldStat2_1.setText(String.valueOf(srednia - 2 * odchylenie));
        jFieldStat3_1.setText(String.valueOf(srednia - 3 * odchylenie));
        jFieldStat4_1.setText(String.valueOf(srednia - 4 * odchylenie));
        jFieldStat5_1.setText(String.valueOf(srednia - 5 * odchylenie));
        jFieldStat6_1.setText(String.valueOf(srednia - 6 * odchylenie));
        jFieldStat1_2.setText(String.valueOf(srednia + 1 * odchylenie));
        jFieldStat2_2.setText(String.valueOf(srednia + 2 * odchylenie));
        jFieldStat3_2.setText(String.valueOf(srednia + 3 * odchylenie));
        jFieldStat4_2.setText(String.valueOf(srednia + 4 * odchylenie));
        jFieldStat5_2.setText(String.valueOf(srednia + 5 * odchylenie));
        jFieldStat6_2.setText(String.valueOf(srednia + 6 * odchylenie));
        if (listData.size() > 6) {
            jFieldStat1_1.setText(String.valueOf(listData.get(listData.size() / 6)));
            jFieldStat1_2.setText(String.valueOf(listData.get(listData.size() * 5 / 6)));
        }
        if (listData.size() > 44) {
            jFieldStat2_1.setText(String.valueOf(listData.get(listData.size() / 44)));
            jFieldStat2_2.setText(String.valueOf(listData.get(listData.size() * 43 / 44)));
        }
        if (listData.size() > 740) {
            jFieldStat3_1.setText(String.valueOf(listData.get(listData.size() / 740)));
            jFieldStat3_2.setText(String.valueOf(listData.get(listData.size() * 739 / 740)));
        }
        if (this.jRadioKumulatywny.isSelected()) {
            TimeSeriesCollection dataset = new TimeSeriesCollection();
            dataset.addSeries(tsCumulative);
            JFreeChart chart = ChartFactory.createTimeSeriesChart("Dane: " + nazwa + " " + plik, "Czas", nazwa, dataset);
            ChartPanel chartPanel = new ChartPanel(chart);
            jPanelChart.removeAll();
            jPanelChart.add(chartPanel, BorderLayout.CENTER);
            jPanelChart.validate();
        } else if (this.jRadioZwyklyMaksimum.isSelected()) {
            TimeSeriesCollection dataset = new TimeSeriesCollection();
            dataset.addSeries(ts);
            dataset.addSeries(tsMax);
            JFreeChart chart = ChartFactory.createTimeSeriesChart("Dane: " + nazwa + " " + plik, "Czas", nazwa, dataset);
            ChartPanel chartPanel = new ChartPanel(chart);
            jPanelChart.removeAll();
            jPanelChart.add(chartPanel, BorderLayout.CENTER);
            jPanelChart.validate();
        } else if (this.jRadioHistogram.isSelected()) {
            HistogramDataset dataset = new HistogramDataset();
            dataset.setType(HistogramType.RELATIVE_FREQUENCY);
            double[] arrayData = new double[listData.size()];
            for (int i = 0; i < listData.size(); i++) {
                arrayData[i] = listData.get(i);
            }
            dataset.addSeries("Histogram data", arrayData, 50);
            JFreeChart chart = ChartFactory.createHistogram("Histogram: " + nazwa + " " + plik, nazwa, "Wystąpienia", dataset, PlotOrientation.VERTICAL, true, true, false);
            ChartPanel chartPanel = new ChartPanel(chart);
            jPanelChart.removeAll();
            jPanelChart.add(chartPanel, BorderLayout.CENTER);
            jPanelChart.validate();
        }
    }//GEN-LAST:event_jButtonChartActionPerformed

    private void jButtonAWSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAWSActionPerformed
        Runnable downloadTask = () -> {
            //this.clearInputs();
            String nazwa = JOptionPane.showInputDialog(this, "Podaj nazwę konfiguracji:");
            String tmpDir = System.getProperty("java.io.tmpdir");
            AmazonS3 s3 = new AmazonS3Client();
            s3.setRegion(com.amazonaws.regions.Region.getRegion(com.amazonaws.regions.Regions.EU_CENTRAL_1));
            this.jProgressAWS.setString("Listing objects");
            ObjectListing objList = s3.listObjects("outgenerator2", nazwa + ".");
            List<S3ObjectSummary> summaries = objList.getObjectSummaries();
            this.jProgressAWS.setValue(0);
            this.jProgressAWS.setMaximum(100);
            TransferManager tm = new TransferManager();
            for (S3ObjectSummary summary : summaries) {
                this.files.add(tmpDir + File.separator + summary.getKey());
            }
            this.files = new ArrayList<String>(this.files.stream().distinct().collect(Collectors.toList()));
            long _wholeSize = 0;
            this.jProgressAWS.setString("Starting downloads");
            ArrayList<Download> downloads = new ArrayList<Download>();
            for (S3ObjectSummary summary : summaries) {
                if (!(new File(tmpDir + File.separator + summary.getKey()).isFile())) {
                    Download currentDownload = tm.download(new GetObjectRequest("outgenerator2", summary.getKey()), new File(tmpDir + File.separator + summary.getKey()));
                    _wholeSize += currentDownload.getProgress().getTotalBytesToTransfer();
                    downloads.add(currentDownload);
                }
            }
            final long wholeSize = _wholeSize;
            for (Download download : downloads) {
                download.addProgressListener(new ProgressListener() {
                    @Override
                    public void progressChanged(ProgressEvent pe) {
                        long sumValue = downloads.stream().map(q -> q.getProgress().getBytesTransferred()).reduce(0L, Long::sum);
                        AnalyzeForm.this.jProgressAWS.setValue((int) (sumValue * 100 / wholeSize));
                        AnalyzeForm.this.jProgressAWS.setString((int) (sumValue * 100 / wholeSize) + "%");
                    }
                });
            }
            for (Download download : downloads) {
                try {
                    download.waitForException();
                } catch (InterruptedException ex) {
                    Logger.getLogger(AnalyzeForm.class.getName()).log(Level.SEVERE, "Error downloading", ex);
                }
            }
            this.jProgressAWS.setString("Gotowe!");
            this.jButtonRefreshActionPerformed(null);
            String[] filesData = new String[this.files.size()];
            this.files.toArray(filesData);
            this.jListFiles.setListData(filesData);
        };
        Thread downloadThread = new Thread(downloadTask);
        downloadThread.start();
    }//GEN-LAST:event_jButtonAWSActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        this.clearInputs();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonDodajWieleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajWieleActionPerformed
        this.jFileChooser.setMultiSelectionEnabled(true);
        if (this.jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            for (File selectedFile : this.jFileChooser.getSelectedFiles()) {
                this.files.add(selectedFile.getAbsolutePath());
            }
            String[] filesData = new String[this.files.size()];
            this.files.toArray(filesData);
            this.jListFiles.setListData(filesData);
        }
        this.jFileChooser.setMultiSelectionEnabled(false);
    }//GEN-LAST:event_jButtonDodajWieleActionPerformed

    private void jComboWykres1WlasciwoscItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboWykres1WlasciwoscItemStateChanged
        jButtonChartActionPerformed(null);
    }//GEN-LAST:event_jComboWykres1WlasciwoscItemStateChanged

    private void jComboWykres1PlikItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboWykres1PlikItemStateChanged
        jButtonChartActionPerformed(null);
    }//GEN-LAST:event_jComboWykres1PlikItemStateChanged

    private void jButtonChart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChart2ActionPerformed
        if (this.jComboWykres2Wlasciwosc1.getSelectedIndex() == -1
                || this.jComboWykres2Wlasciwosc2.getSelectedIndex() == -1
                || this.jComboWykres2Plik.getSelectedIndex() == -1) {
            return;
        }
        if (whileRefresh) {
            return;
        }
        String wlasciwosc1 = this.jComboWykres2Wlasciwosc1.getSelectedItem().toString();
        String wlasciwosc2 = this.jComboWykres2Wlasciwosc2.getSelectedItem().toString();
        String plik = this.jComboWykres2Plik.getSelectedItem().toString();
        XYSeries xyseries = new XYSeries("Dane");
        ArrayList<Long> versions = this.getSelectedVersions();
        for (GenerationInfo generationInfo : this.loadedInfo) {
            if (plik.isEmpty() || plik.equals(generationInfo.getInputFile().getName())) {
                Map<String, Long> additionalInfo = generationInfo.getOutputFile().getAdditionalInformation();
                if (additionalInfo.containsKey(wlasciwosc1) && additionalInfo.containsKey(wlasciwosc2)) {
                    if (versions.contains(additionalInfo.get("Wersja"))) {
                        xyseries.add(additionalInfo.get(wlasciwosc1), additionalInfo.get(wlasciwosc2));
                    }
                }
            }
        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(xyseries);
        JFreeChart chart = ChartFactory.createScatterPlot("Dane: " + wlasciwosc1 + " " + wlasciwosc2, wlasciwosc1, wlasciwosc2, dataset, PlotOrientation.HORIZONTAL, true, true, false);
        ChartPanel chartPanel = new ChartPanel(chart);
        jPanelChart.removeAll();
        jPanelChart.add(chartPanel, BorderLayout.CENTER);
        jPanelChart.validate();
    }//GEN-LAST:event_jButtonChart2ActionPerformed

    private void jComboWykres2Wlasciwosc1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboWykres2Wlasciwosc1ItemStateChanged
        jButtonChart2ActionPerformed(null);
    }//GEN-LAST:event_jComboWykres2Wlasciwosc1ItemStateChanged

    private void jComboWykres2Wlasciwosc2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboWykres2Wlasciwosc2ItemStateChanged
        jButtonChart2ActionPerformed(null);
    }//GEN-LAST:event_jComboWykres2Wlasciwosc2ItemStateChanged

    private void jComboWykres2PlikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboWykres2PlikActionPerformed
        jButtonChart2ActionPerformed(null);
    }//GEN-LAST:event_jComboWykres2PlikActionPerformed

    private void jRadioZwyklyMaksimumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioZwyklyMaksimumActionPerformed
        jButtonChartActionPerformed(null);
    }//GEN-LAST:event_jRadioZwyklyMaksimumActionPerformed

    private void jRadioKumulatywnyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioKumulatywnyActionPerformed
        jButtonChartActionPerformed(null);
    }//GEN-LAST:event_jRadioKumulatywnyActionPerformed

    private void jRadioHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioHistogramActionPerformed
        jButtonChartActionPerformed(null);
    }//GEN-LAST:event_jRadioHistogramActionPerformed

    private void jButtonJoinSciezkaDocelowaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonJoinSciezkaDocelowaActionPerformed
        this.jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (this.jFileChooser.showSaveDialog(AnalyzeForm.this) == JFileChooser.APPROVE_OPTION) {
            this.jFieldJoinSciezka.setText(this.jFileChooser.getSelectedFile().getAbsolutePath().toString());
        }
        this.jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_jButtonJoinSciezkaDocelowaActionPerformed

    private void jButtonJoinExeJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonJoinExeJoinActionPerformed
        if (this.jFileChooser.showOpenDialog(AnalyzeForm.this) == JFileChooser.APPROVE_OPTION) {
            this.jFieldJoinExeJoin.setText(this.jFileChooser.getSelectedFile().getAbsolutePath().toString());
        }
    }//GEN-LAST:event_jButtonJoinExeJoinActionPerformed

    private void jCheckUruchomJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckUruchomJoinActionPerformed
        this.jFieldJoinExeJoin.setEnabled(jCheckUruchomJoin.isSelected());
        this.jButtonJoinExeJoin.setEnabled(jCheckUruchomJoin.isSelected());
    }//GEN-LAST:event_jCheckUruchomJoinActionPerformed

    private void clearInputs() {
        this.files = new ArrayList<>();
        this.loadedInfo = new ArrayList<>();
        String[] filesData = new String[this.files.size()];
        this.files.toArray(filesData);
        this.jListFiles.setListData(filesData);
        this.setTableStats(new ArrayList<>());
        DefaultTableModel dtm = (DefaultTableModel) jTableWersje.getModel();
        dtm.setNumRows(0);
    }

    private void setTableStats(ArrayList<GenerationInfo> generationInfos) {
        List<GenerationInfo> sortedGenerationInfos = generationInfos.stream()
                .sorted().collect(Collectors.toList());
        ArrayList<String> columnNames = sortedGenerationInfos.stream().flatMap(q -> q.getOutputFile().
                getAdditionalInformation().keySet().stream())
                .sorted().distinct()
                .collect(Collectors.toCollection(ArrayList::new));
        int rowCount = generationInfos.size();
        int columnCount = columnNames.size();
        columnNames.add(0, "Nazwa");
        columnNames.add(1, "Data");
        Object[][] data = new Object[rowCount][columnCount + 2];
        SimpleDateFormat dateFormatter = new SimpleDateFormat("HH:mm MM-dd");
        for (int i = 0; i < rowCount; i++) {
            data[i][0] = sortedGenerationInfos.get(i).getInputFile().getName();
            Date generateDate = sortedGenerationInfos.get(i).getGenerateStartDate();
            String generateDateString = dateFormatter.format(generateDate);
            data[i][1] = generateDateString;
            for (int j = 0; j < columnCount; j++) {
                data[i][j + 2] = sortedGenerationInfos.get(i).getOutputFile()
                        .getAdditionalInformation().get(columnNames.get(j + 2));
            }
        }
        DefaultTableModel model = new DefaultTableModel(data, columnNames.toArray()) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        jTableStats.setModel(model);
    }

    private ArrayList<Long> getSelectedVersions() {
        ArrayList<Long> versions = new ArrayList<Long>();
        DefaultTableModel dtm = (DefaultTableModel) jTableWersje.getModel();
        for (int i = 0; i < dtm.getRowCount(); i++) {
            boolean czyZaznaczone = (boolean) dtm.getValueAt(i, 1);
            if (czyZaznaczone) {
                versions.add(Long.valueOf((String) dtm.getValueAt(i, 0)));
            }
        }
        return versions;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainWizardForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalyzeForm().setVisible(true);
            }
        });
    }

    private ArrayList<String> files = new ArrayList<>();
    private JFileChooser jFileChooser = new JFileChooser();
    private List<GenerationInfo> loadedInfo;
    private boolean whileRefresh = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1Zmienna;
    private javax.swing.JButton jButtonAWS;
    private javax.swing.JButton jButtonChart;
    private javax.swing.JButton jButtonChart2;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonDodaj;
    private javax.swing.JButton jButtonDodajWiele;
    private javax.swing.JButton jButtonJoin;
    private javax.swing.JButton jButtonJoinExeJoin;
    private javax.swing.JButton jButtonJoinSciezkaDocelowa;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JCheckBox jCheckUruchomJoin;
    private javax.swing.JComboBox<String> jComboWykres1Plik;
    private javax.swing.JComboBox<String> jComboWykres1Wlasciwosc;
    private javax.swing.JComboBox<String> jComboWykres2Plik;
    private javax.swing.JComboBox<String> jComboWykres2Wlasciwosc1;
    private javax.swing.JComboBox<String> jComboWykres2Wlasciwosc2;
    private javax.swing.JTextField jFieldJoinExeJoin;
    private javax.swing.JTextField jFieldJoinSciezka;
    private javax.swing.JTextField jFieldStat1_1;
    private javax.swing.JTextField jFieldStat1_2;
    private javax.swing.JTextField jFieldStat2_1;
    private javax.swing.JTextField jFieldStat2_2;
    private javax.swing.JTextField jFieldStat3_1;
    private javax.swing.JTextField jFieldStat3_2;
    private javax.swing.JTextField jFieldStat4_1;
    private javax.swing.JTextField jFieldStat4_2;
    private javax.swing.JTextField jFieldStat5_1;
    private javax.swing.JTextField jFieldStat5_2;
    private javax.swing.JTextField jFieldStat6_1;
    private javax.swing.JTextField jFieldStat6_2;
    private javax.swing.JTextField jFieldWykres1Odchylenie;
    private javax.swing.JTextField jFieldWykres1Srednia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListFiles;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelChart;
    private javax.swing.JProgressBar jProgressAWS;
    private javax.swing.JProgressBar jProgressJoin;
    private javax.swing.JRadioButton jRadioHistogram;
    private javax.swing.JRadioButton jRadioKumulatywny;
    private javax.swing.JRadioButton jRadioZwyklyMaksimum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableStats;
    private javax.swing.JTable jTableWersje;
    // End of variables declaration//GEN-END:variables
}
